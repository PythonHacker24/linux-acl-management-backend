// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: results_transactions.sql

package postgresql

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const countResultsTransactionsByOperationPQ = `-- name: CountResultsTransactionsByOperationPQ :one
SELECT COUNT(*) FROM results_transactions_archive
WHERE session_id = $1 AND operation = $2
`

type CountResultsTransactionsByOperationPQParams struct {
	SessionID uuid.UUID `json:"session_id"`
	Operation string    `json:"operation"`
}

func (q *Queries) CountResultsTransactionsByOperationPQ(ctx context.Context, arg CountResultsTransactionsByOperationPQParams) (int64, error) {
	row := q.db.QueryRow(ctx, countResultsTransactionsByOperationPQ, arg.SessionID, arg.Operation)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const countResultsTransactionsByStatusPQ = `-- name: CountResultsTransactionsByStatusPQ :one
SELECT COUNT(*) FROM results_transactions_archive
WHERE session_id = $1 AND status = $2
`

type CountResultsTransactionsByStatusPQParams struct {
	SessionID uuid.UUID `json:"session_id"`
	Status    string    `json:"status"`
}

func (q *Queries) CountResultsTransactionsByStatusPQ(ctx context.Context, arg CountResultsTransactionsByStatusPQParams) (int64, error) {
	row := q.db.QueryRow(ctx, countResultsTransactionsByStatusPQ, arg.SessionID, arg.Status)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createResultsTransactionPQ = `-- name: CreateResultsTransactionPQ :one
INSERT INTO results_transactions_archive (
    id,
    session_id,
    timestamp,
    operation,
    target_path,
    entries,
    status,
    error_msg,
    output,
    executed_by,
    duration_ms
) VALUES (
    $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11
) RETURNING id, session_id, timestamp, operation, target_path, entries, status, error_msg, output, executed_by, duration_ms, created_at
`

type CreateResultsTransactionPQParams struct {
	ID         uuid.UUID          `json:"id"`
	SessionID  uuid.UUID          `json:"session_id"`
	Timestamp  pgtype.Timestamptz `json:"timestamp"`
	Operation  string             `json:"operation"`
	TargetPath string             `json:"target_path"`
	Entries    []byte             `json:"entries"`
	Status     string             `json:"status"`
	ErrorMsg   pgtype.Text        `json:"error_msg"`
	Output     pgtype.Text        `json:"output"`
	ExecutedBy string             `json:"executed_by"`
	DurationMs pgtype.Int8        `json:"duration_ms"`
}

func (q *Queries) CreateResultsTransactionPQ(ctx context.Context, arg CreateResultsTransactionPQParams) (ResultsTransactionsArchive, error) {
	row := q.db.QueryRow(ctx, createResultsTransactionPQ,
		arg.ID,
		arg.SessionID,
		arg.Timestamp,
		arg.Operation,
		arg.TargetPath,
		arg.Entries,
		arg.Status,
		arg.ErrorMsg,
		arg.Output,
		arg.ExecutedBy,
		arg.DurationMs,
	)
	var i ResultsTransactionsArchive
	err := row.Scan(
		&i.ID,
		&i.SessionID,
		&i.Timestamp,
		&i.Operation,
		&i.TargetPath,
		&i.Entries,
		&i.Status,
		&i.ErrorMsg,
		&i.Output,
		&i.ExecutedBy,
		&i.DurationMs,
		&i.CreatedAt,
	)
	return i, err
}

const deleteResultsTransactionPQ = `-- name: DeleteResultsTransactionPQ :exec
DELETE FROM results_transactions_archive
WHERE id = $1
`

func (q *Queries) DeleteResultsTransactionPQ(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteResultsTransactionPQ, id)
	return err
}

const deleteResultsTransactionsBySessionPQ = `-- name: DeleteResultsTransactionsBySessionPQ :exec
DELETE FROM results_transactions_archive
WHERE session_id = $1
`

func (q *Queries) DeleteResultsTransactionsBySessionPQ(ctx context.Context, sessionID uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteResultsTransactionsBySessionPQ, sessionID)
	return err
}

const getFailedResultsTransactionsPQ = `-- name: GetFailedResultsTransactionsPQ :many
SELECT id, session_id, timestamp, operation, target_path, entries, status, error_msg, output, executed_by, duration_ms, created_at FROM results_transactions_archive
WHERE session_id = $1 AND status = 'failed'
ORDER BY timestamp DESC
`

func (q *Queries) GetFailedResultsTransactionsPQ(ctx context.Context, sessionID uuid.UUID) ([]ResultsTransactionsArchive, error) {
	rows, err := q.db.Query(ctx, getFailedResultsTransactionsPQ, sessionID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ResultsTransactionsArchive{}
	for rows.Next() {
		var i ResultsTransactionsArchive
		if err := rows.Scan(
			&i.ID,
			&i.SessionID,
			&i.Timestamp,
			&i.Operation,
			&i.TargetPath,
			&i.Entries,
			&i.Status,
			&i.ErrorMsg,
			&i.Output,
			&i.ExecutedBy,
			&i.DurationMs,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getResultsTransactionPQ = `-- name: GetResultsTransactionPQ :one
SELECT id, session_id, timestamp, operation, target_path, entries, status, error_msg, output, executed_by, duration_ms, created_at FROM results_transactions_archive
WHERE id = $1
`

func (q *Queries) GetResultsTransactionPQ(ctx context.Context, id uuid.UUID) (ResultsTransactionsArchive, error) {
	row := q.db.QueryRow(ctx, getResultsTransactionPQ, id)
	var i ResultsTransactionsArchive
	err := row.Scan(
		&i.ID,
		&i.SessionID,
		&i.Timestamp,
		&i.Operation,
		&i.TargetPath,
		&i.Entries,
		&i.Status,
		&i.ErrorMsg,
		&i.Output,
		&i.ExecutedBy,
		&i.DurationMs,
		&i.CreatedAt,
	)
	return i, err
}

const getResultsTransactionStatsPQ = `-- name: GetResultsTransactionStatsPQ :one
SELECT 
    COUNT(*) as total_transactions,
    COUNT(CASE WHEN status = 'success' THEN 1 END) as successful_transactions,
    COUNT(CASE WHEN status = 'failed' THEN 1 END) as failed_transactions,
    AVG(duration_ms) as avg_duration_ms
FROM results_transactions_archive
WHERE session_id = $1
`

type GetResultsTransactionStatsPQRow struct {
	TotalTransactions      int64   `json:"total_transactions"`
	SuccessfulTransactions int64   `json:"successful_transactions"`
	FailedTransactions     int64   `json:"failed_transactions"`
	AvgDurationMs          float64 `json:"avg_duration_ms"`
}

func (q *Queries) GetResultsTransactionStatsPQ(ctx context.Context, sessionID uuid.UUID) (GetResultsTransactionStatsPQRow, error) {
	row := q.db.QueryRow(ctx, getResultsTransactionStatsPQ, sessionID)
	var i GetResultsTransactionStatsPQRow
	err := row.Scan(
		&i.TotalTransactions,
		&i.SuccessfulTransactions,
		&i.FailedTransactions,
		&i.AvgDurationMs,
	)
	return i, err
}

const getResultsTransactionsByOperationPQ = `-- name: GetResultsTransactionsByOperationPQ :many
SELECT id, session_id, timestamp, operation, target_path, entries, status, error_msg, output, executed_by, duration_ms, created_at FROM results_transactions_archive
WHERE session_id = $1 AND operation = $2
ORDER BY timestamp DESC
`

type GetResultsTransactionsByOperationPQParams struct {
	SessionID uuid.UUID `json:"session_id"`
	Operation string    `json:"operation"`
}

func (q *Queries) GetResultsTransactionsByOperationPQ(ctx context.Context, arg GetResultsTransactionsByOperationPQParams) ([]ResultsTransactionsArchive, error) {
	rows, err := q.db.Query(ctx, getResultsTransactionsByOperationPQ, arg.SessionID, arg.Operation)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ResultsTransactionsArchive{}
	for rows.Next() {
		var i ResultsTransactionsArchive
		if err := rows.Scan(
			&i.ID,
			&i.SessionID,
			&i.Timestamp,
			&i.Operation,
			&i.TargetPath,
			&i.Entries,
			&i.Status,
			&i.ErrorMsg,
			&i.Output,
			&i.ExecutedBy,
			&i.DurationMs,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getResultsTransactionsByPathPQ = `-- name: GetResultsTransactionsByPathPQ :many
SELECT id, session_id, timestamp, operation, target_path, entries, status, error_msg, output, executed_by, duration_ms, created_at FROM results_transactions_archive
WHERE session_id = $1 AND target_path = $2
ORDER BY timestamp DESC
`

type GetResultsTransactionsByPathPQParams struct {
	SessionID  uuid.UUID `json:"session_id"`
	TargetPath string    `json:"target_path"`
}

func (q *Queries) GetResultsTransactionsByPathPQ(ctx context.Context, arg GetResultsTransactionsByPathPQParams) ([]ResultsTransactionsArchive, error) {
	rows, err := q.db.Query(ctx, getResultsTransactionsByPathPQ, arg.SessionID, arg.TargetPath)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ResultsTransactionsArchive{}
	for rows.Next() {
		var i ResultsTransactionsArchive
		if err := rows.Scan(
			&i.ID,
			&i.SessionID,
			&i.Timestamp,
			&i.Operation,
			&i.TargetPath,
			&i.Entries,
			&i.Status,
			&i.ErrorMsg,
			&i.Output,
			&i.ExecutedBy,
			&i.DurationMs,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getResultsTransactionsBySessionPQ = `-- name: GetResultsTransactionsBySessionPQ :many
SELECT id, session_id, timestamp, operation, target_path, entries, status, error_msg, output, executed_by, duration_ms, created_at FROM results_transactions_archive
WHERE session_id = $1
ORDER BY timestamp DESC
`

func (q *Queries) GetResultsTransactionsBySessionPQ(ctx context.Context, sessionID uuid.UUID) ([]ResultsTransactionsArchive, error) {
	rows, err := q.db.Query(ctx, getResultsTransactionsBySessionPQ, sessionID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ResultsTransactionsArchive{}
	for rows.Next() {
		var i ResultsTransactionsArchive
		if err := rows.Scan(
			&i.ID,
			&i.SessionID,
			&i.Timestamp,
			&i.Operation,
			&i.TargetPath,
			&i.Entries,
			&i.Status,
			&i.ErrorMsg,
			&i.Output,
			&i.ExecutedBy,
			&i.DurationMs,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getSuccessfulResultsTransactionsPQ = `-- name: GetSuccessfulResultsTransactionsPQ :many
SELECT id, session_id, timestamp, operation, target_path, entries, status, error_msg, output, executed_by, duration_ms, created_at FROM results_transactions_archive
WHERE session_id = $1 AND status = 'success'
ORDER BY timestamp DESC
`

func (q *Queries) GetSuccessfulResultsTransactionsPQ(ctx context.Context, sessionID uuid.UUID) ([]ResultsTransactionsArchive, error) {
	rows, err := q.db.Query(ctx, getSuccessfulResultsTransactionsPQ, sessionID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ResultsTransactionsArchive{}
	for rows.Next() {
		var i ResultsTransactionsArchive
		if err := rows.Scan(
			&i.ID,
			&i.SessionID,
			&i.Timestamp,
			&i.Operation,
			&i.TargetPath,
			&i.Entries,
			&i.Status,
			&i.ErrorMsg,
			&i.Output,
			&i.ExecutedBy,
			&i.DurationMs,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateResultsTransactionStatusPQ = `-- name: UpdateResultsTransactionStatusPQ :one
UPDATE results_transactions_archive
SET 
    status = $2,
    error_msg = $3,
    output = $4,
    duration_ms = $5
WHERE id = $1
RETURNING id, session_id, timestamp, operation, target_path, entries, status, error_msg, output, executed_by, duration_ms, created_at
`

type UpdateResultsTransactionStatusPQParams struct {
	ID         uuid.UUID   `json:"id"`
	Status     string      `json:"status"`
	ErrorMsg   pgtype.Text `json:"error_msg"`
	Output     pgtype.Text `json:"output"`
	DurationMs pgtype.Int8 `json:"duration_ms"`
}

func (q *Queries) UpdateResultsTransactionStatusPQ(ctx context.Context, arg UpdateResultsTransactionStatusPQParams) (ResultsTransactionsArchive, error) {
	row := q.db.QueryRow(ctx, updateResultsTransactionStatusPQ,
		arg.ID,
		arg.Status,
		arg.ErrorMsg,
		arg.Output,
		arg.DurationMs,
	)
	var i ResultsTransactionsArchive
	err := row.Scan(
		&i.ID,
		&i.SessionID,
		&i.Timestamp,
		&i.Operation,
		&i.TargetPath,
		&i.Entries,
		&i.Status,
		&i.ErrorMsg,
		&i.Output,
		&i.ExecutedBy,
		&i.DurationMs,
		&i.CreatedAt,
	)
	return i, err
}

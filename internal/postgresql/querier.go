// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0

package postgresql

import (
	"context"

	"github.com/google/uuid"
)

type Querier interface {
	CountPendingTransactionsByOperationPQ(ctx context.Context, arg CountPendingTransactionsByOperationPQParams) (int64, error)
	CountPendingTransactionsByStatusPQ(ctx context.Context, arg CountPendingTransactionsByStatusPQParams) (int64, error)
	CountResultsTransactionsByOperationPQ(ctx context.Context, arg CountResultsTransactionsByOperationPQParams) (int64, error)
	CountResultsTransactionsByStatusPQ(ctx context.Context, arg CountResultsTransactionsByStatusPQParams) (int64, error)
	CreatePendingTransactionPQ(ctx context.Context, arg CreatePendingTransactionPQParams) (PendingTransactionsArchive, error)
	CreateResultsTransactionPQ(ctx context.Context, arg CreateResultsTransactionPQParams) (ResultsTransactionsArchive, error)
	DeletePendingTransactionPQ(ctx context.Context, id uuid.UUID) error
	DeletePendingTransactionsBySessionPQ(ctx context.Context, sessionID uuid.UUID) error
	DeleteResultsTransactionPQ(ctx context.Context, id uuid.UUID) error
	DeleteResultsTransactionsBySessionPQ(ctx context.Context, sessionID uuid.UUID) error
	DeleteSessionPQ(ctx context.Context, id uuid.UUID) error
	GetFailedResultsTransactionsPQ(ctx context.Context, sessionID uuid.UUID) ([]ResultsTransactionsArchive, error)
	GetPendingTransactionPQ(ctx context.Context, id uuid.UUID) (PendingTransactionsArchive, error)
	GetPendingTransactionStatsPQ(ctx context.Context, sessionID uuid.UUID) (GetPendingTransactionStatsPQRow, error)
	GetPendingTransactionsByOperationPQ(ctx context.Context, arg GetPendingTransactionsByOperationPQParams) ([]PendingTransactionsArchive, error)
	GetPendingTransactionsByPathPQ(ctx context.Context, arg GetPendingTransactionsByPathPQParams) ([]PendingTransactionsArchive, error)
	GetPendingTransactionsBySessionPQ(ctx context.Context, sessionID uuid.UUID) ([]PendingTransactionsArchive, error)
	GetPendingTransactionsByUserPaginatedPQ(ctx context.Context, arg GetPendingTransactionsByUserPaginatedPQParams) ([]PendingTransactionsArchive, error)
	GetPendingTransactionsPQ(ctx context.Context, sessionID uuid.UUID) ([]PendingTransactionsArchive, error)
	GetResultsTransactionPQ(ctx context.Context, id uuid.UUID) (ResultsTransactionsArchive, error)
	GetResultsTransactionStatsPQ(ctx context.Context, sessionID uuid.UUID) (GetResultsTransactionStatsPQRow, error)
	GetResultsTransactionsByOperationPQ(ctx context.Context, arg GetResultsTransactionsByOperationPQParams) ([]ResultsTransactionsArchive, error)
	GetResultsTransactionsByPathPQ(ctx context.Context, arg GetResultsTransactionsByPathPQParams) ([]ResultsTransactionsArchive, error)
	GetResultsTransactionsBySessionPQ(ctx context.Context, sessionID uuid.UUID) ([]ResultsTransactionsArchive, error)
	GetSessionByUsernamePaginatedPQ(ctx context.Context, arg GetSessionByUsernamePaginatedPQParams) ([]SessionsArchive, error)
	GetSessionPQ(ctx context.Context, id uuid.UUID) (SessionsArchive, error)
	GetSuccessfulResultsTransactionsPQ(ctx context.Context, sessionID uuid.UUID) ([]ResultsTransactionsArchive, error)
	StoreSessionPQ(ctx context.Context, arg StoreSessionPQParams) (SessionsArchive, error)
	UpdatePendingTransactionStatusPQ(ctx context.Context, arg UpdatePendingTransactionStatusPQParams) (PendingTransactionsArchive, error)
	UpdateResultsTransactionStatusPQ(ctx context.Context, arg UpdateResultsTransactionStatusPQParams) (ResultsTransactionsArchive, error)
}

var _ Querier = (*Queries)(nil)

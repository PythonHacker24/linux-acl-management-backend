// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: transactions.sql

package postgresql

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const countTransactionsByStatus = `-- name: CountTransactionsByStatus :one
SELECT COUNT(*) FROM transactions_archive 
WHERE session_id = $1 AND status = $2
`

type CountTransactionsByStatusParams struct {
	SessionID uuid.UUID `json:"session_id"`
	Status    string    `json:"status"`
}

func (q *Queries) CountTransactionsByStatus(ctx context.Context, arg CountTransactionsByStatusParams) (int64, error) {
	row := q.db.QueryRow(ctx, countTransactionsByStatus, arg.SessionID, arg.Status)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createTransaction = `-- name: CreateTransaction :one
INSERT INTO transactions_archive (
    id, session_id, status, output, created_at
) VALUES (
    $1, $2, $3, $4, $5
) RETURNING id, session_id, status, output, created_at
`

type CreateTransactionParams struct {
	ID        uuid.UUID        `json:"id"`
	SessionID uuid.UUID        `json:"session_id"`
	Status    string           `json:"status"`
	Output    pgtype.Text      `json:"output"`
	CreatedAt pgtype.Timestamp `json:"created_at"`
}

func (q *Queries) CreateTransaction(ctx context.Context, arg CreateTransactionParams) (TransactionsArchive, error) {
	row := q.db.QueryRow(ctx, createTransaction,
		arg.ID,
		arg.SessionID,
		arg.Status,
		arg.Output,
		arg.CreatedAt,
	)
	var i TransactionsArchive
	err := row.Scan(
		&i.ID,
		&i.SessionID,
		&i.Status,
		&i.Output,
		&i.CreatedAt,
	)
	return i, err
}

const deleteTransaction = `-- name: DeleteTransaction :exec
DELETE FROM transactions_archive WHERE id = $1
`

func (q *Queries) DeleteTransaction(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteTransaction, id)
	return err
}

const deleteTransactionsBySession = `-- name: DeleteTransactionsBySession :exec
DELETE FROM transactions_archive WHERE session_id = $1
`

func (q *Queries) DeleteTransactionsBySession(ctx context.Context, sessionID uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteTransactionsBySession, sessionID)
	return err
}

const getFailedTransactions = `-- name: GetFailedTransactions :many
SELECT id, session_id, status, output, created_at FROM transactions_archive 
WHERE session_id = $1 AND status = 'failure'
ORDER BY created_at DESC
`

func (q *Queries) GetFailedTransactions(ctx context.Context, sessionID uuid.UUID) ([]TransactionsArchive, error) {
	rows, err := q.db.Query(ctx, getFailedTransactions, sessionID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []TransactionsArchive{}
	for rows.Next() {
		var i TransactionsArchive
		if err := rows.Scan(
			&i.ID,
			&i.SessionID,
			&i.Status,
			&i.Output,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getSuccessfulTransactions = `-- name: GetSuccessfulTransactions :many
SELECT id, session_id, status, output, created_at FROM transactions_archive 
WHERE session_id = $1 AND status = 'success'
ORDER BY created_at DESC
`

func (q *Queries) GetSuccessfulTransactions(ctx context.Context, sessionID uuid.UUID) ([]TransactionsArchive, error) {
	rows, err := q.db.Query(ctx, getSuccessfulTransactions, sessionID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []TransactionsArchive{}
	for rows.Next() {
		var i TransactionsArchive
		if err := rows.Scan(
			&i.ID,
			&i.SessionID,
			&i.Status,
			&i.Output,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTransaction = `-- name: GetTransaction :one
SELECT id, session_id, status, output, created_at FROM transactions_archive 
WHERE id = $1
`

func (q *Queries) GetTransaction(ctx context.Context, id uuid.UUID) (TransactionsArchive, error) {
	row := q.db.QueryRow(ctx, getTransaction, id)
	var i TransactionsArchive
	err := row.Scan(
		&i.ID,
		&i.SessionID,
		&i.Status,
		&i.Output,
		&i.CreatedAt,
	)
	return i, err
}

const getTransactionsBySession = `-- name: GetTransactionsBySession :many
SELECT id, session_id, status, output, created_at FROM transactions_archive 
WHERE session_id = $1
ORDER BY created_at DESC
`

func (q *Queries) GetTransactionsBySession(ctx context.Context, sessionID uuid.UUID) ([]TransactionsArchive, error) {
	rows, err := q.db.Query(ctx, getTransactionsBySession, sessionID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []TransactionsArchive{}
	for rows.Next() {
		var i TransactionsArchive
		if err := rows.Scan(
			&i.ID,
			&i.SessionID,
			&i.Status,
			&i.Output,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: pending_transactions.sql

package postgresql

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const countPendingTransactionsByOperationPQ = `-- name: CountPendingTransactionsByOperationPQ :one
SELECT COUNT(*) FROM pending_transactions_archive
WHERE session_id = $1 AND operation = $2
`

type CountPendingTransactionsByOperationPQParams struct {
	SessionID uuid.UUID `json:"session_id"`
	Operation string    `json:"operation"`
}

func (q *Queries) CountPendingTransactionsByOperationPQ(ctx context.Context, arg CountPendingTransactionsByOperationPQParams) (int64, error) {
	row := q.db.QueryRow(ctx, countPendingTransactionsByOperationPQ, arg.SessionID, arg.Operation)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const countPendingTransactionsByStatusPQ = `-- name: CountPendingTransactionsByStatusPQ :one
SELECT COUNT(*) FROM pending_transactions_archive
WHERE session_id = $1 AND status = $2
`

type CountPendingTransactionsByStatusPQParams struct {
	SessionID uuid.UUID `json:"session_id"`
	Status    string    `json:"status"`
}

func (q *Queries) CountPendingTransactionsByStatusPQ(ctx context.Context, arg CountPendingTransactionsByStatusPQParams) (int64, error) {
	row := q.db.QueryRow(ctx, countPendingTransactionsByStatusPQ, arg.SessionID, arg.Status)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createPendingTransactionPQ = `-- name: CreatePendingTransactionPQ :one
INSERT INTO pending_transactions_archive (
    id,
    session_id,
    timestamp,
    operation,
    target_path,
    entries,
    status,
    error_msg,
    output,
    executed_by,
    duration_ms,
    ExecStatus
) VALUES (
    $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12
) RETURNING id, session_id, timestamp, operation, target_path, entries, status, error_msg, output, executed_by, duration_ms, execstatus, created_at
`

type CreatePendingTransactionPQParams struct {
	ID         uuid.UUID          `json:"id"`
	SessionID  uuid.UUID          `json:"session_id"`
	Timestamp  pgtype.Timestamptz `json:"timestamp"`
	Operation  string             `json:"operation"`
	TargetPath string             `json:"target_path"`
	Entries    []byte             `json:"entries"`
	Status     string             `json:"status"`
	ErrorMsg   pgtype.Text        `json:"error_msg"`
	Output     pgtype.Text        `json:"output"`
	ExecutedBy string             `json:"executed_by"`
	DurationMs pgtype.Int8        `json:"duration_ms"`
	Execstatus bool               `json:"execstatus"`
}

func (q *Queries) CreatePendingTransactionPQ(ctx context.Context, arg CreatePendingTransactionPQParams) (PendingTransactionsArchive, error) {
	row := q.db.QueryRow(ctx, createPendingTransactionPQ,
		arg.ID,
		arg.SessionID,
		arg.Timestamp,
		arg.Operation,
		arg.TargetPath,
		arg.Entries,
		arg.Status,
		arg.ErrorMsg,
		arg.Output,
		arg.ExecutedBy,
		arg.DurationMs,
		arg.Execstatus,
	)
	var i PendingTransactionsArchive
	err := row.Scan(
		&i.ID,
		&i.SessionID,
		&i.Timestamp,
		&i.Operation,
		&i.TargetPath,
		&i.Entries,
		&i.Status,
		&i.ErrorMsg,
		&i.Output,
		&i.ExecutedBy,
		&i.DurationMs,
		&i.Execstatus,
		&i.CreatedAt,
	)
	return i, err
}

const deletePendingTransactionPQ = `-- name: DeletePendingTransactionPQ :exec
DELETE FROM pending_transactions_archive
WHERE id = $1
`

func (q *Queries) DeletePendingTransactionPQ(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deletePendingTransactionPQ, id)
	return err
}

const deletePendingTransactionsBySessionPQ = `-- name: DeletePendingTransactionsBySessionPQ :exec
DELETE FROM pending_transactions_archive
WHERE session_id = $1
`

func (q *Queries) DeletePendingTransactionsBySessionPQ(ctx context.Context, sessionID uuid.UUID) error {
	_, err := q.db.Exec(ctx, deletePendingTransactionsBySessionPQ, sessionID)
	return err
}

const getPendingTransactionPQ = `-- name: GetPendingTransactionPQ :one
SELECT id, session_id, timestamp, operation, target_path, entries, status, error_msg, output, executed_by, duration_ms, execstatus, created_at FROM pending_transactions_archive
WHERE id = $1
`

func (q *Queries) GetPendingTransactionPQ(ctx context.Context, id uuid.UUID) (PendingTransactionsArchive, error) {
	row := q.db.QueryRow(ctx, getPendingTransactionPQ, id)
	var i PendingTransactionsArchive
	err := row.Scan(
		&i.ID,
		&i.SessionID,
		&i.Timestamp,
		&i.Operation,
		&i.TargetPath,
		&i.Entries,
		&i.Status,
		&i.ErrorMsg,
		&i.Output,
		&i.ExecutedBy,
		&i.DurationMs,
		&i.Execstatus,
		&i.CreatedAt,
	)
	return i, err
}

const getPendingTransactionStatsPQ = `-- name: GetPendingTransactionStatsPQ :one
SELECT 
    COUNT(*) as total_transactions,
    COUNT(CASE WHEN status = 'pending' THEN 1 END) as pending_transactions,
    AVG(duration_ms) as avg_duration_ms
FROM pending_transactions_archive
WHERE session_id = $1
`

type GetPendingTransactionStatsPQRow struct {
	TotalTransactions   int64   `json:"total_transactions"`
	PendingTransactions int64   `json:"pending_transactions"`
	AvgDurationMs       float64 `json:"avg_duration_ms"`
}

func (q *Queries) GetPendingTransactionStatsPQ(ctx context.Context, sessionID uuid.UUID) (GetPendingTransactionStatsPQRow, error) {
	row := q.db.QueryRow(ctx, getPendingTransactionStatsPQ, sessionID)
	var i GetPendingTransactionStatsPQRow
	err := row.Scan(&i.TotalTransactions, &i.PendingTransactions, &i.AvgDurationMs)
	return i, err
}

const getPendingTransactionsByOperationPQ = `-- name: GetPendingTransactionsByOperationPQ :many
SELECT id, session_id, timestamp, operation, target_path, entries, status, error_msg, output, executed_by, duration_ms, execstatus, created_at FROM pending_transactions_archive
WHERE session_id = $1 AND operation = $2
ORDER BY timestamp DESC
`

type GetPendingTransactionsByOperationPQParams struct {
	SessionID uuid.UUID `json:"session_id"`
	Operation string    `json:"operation"`
}

func (q *Queries) GetPendingTransactionsByOperationPQ(ctx context.Context, arg GetPendingTransactionsByOperationPQParams) ([]PendingTransactionsArchive, error) {
	rows, err := q.db.Query(ctx, getPendingTransactionsByOperationPQ, arg.SessionID, arg.Operation)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []PendingTransactionsArchive{}
	for rows.Next() {
		var i PendingTransactionsArchive
		if err := rows.Scan(
			&i.ID,
			&i.SessionID,
			&i.Timestamp,
			&i.Operation,
			&i.TargetPath,
			&i.Entries,
			&i.Status,
			&i.ErrorMsg,
			&i.Output,
			&i.ExecutedBy,
			&i.DurationMs,
			&i.Execstatus,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPendingTransactionsByPathPQ = `-- name: GetPendingTransactionsByPathPQ :many
SELECT id, session_id, timestamp, operation, target_path, entries, status, error_msg, output, executed_by, duration_ms, execstatus, created_at FROM pending_transactions_archive
WHERE session_id = $1 AND target_path = $2
ORDER BY timestamp DESC
`

type GetPendingTransactionsByPathPQParams struct {
	SessionID  uuid.UUID `json:"session_id"`
	TargetPath string    `json:"target_path"`
}

func (q *Queries) GetPendingTransactionsByPathPQ(ctx context.Context, arg GetPendingTransactionsByPathPQParams) ([]PendingTransactionsArchive, error) {
	rows, err := q.db.Query(ctx, getPendingTransactionsByPathPQ, arg.SessionID, arg.TargetPath)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []PendingTransactionsArchive{}
	for rows.Next() {
		var i PendingTransactionsArchive
		if err := rows.Scan(
			&i.ID,
			&i.SessionID,
			&i.Timestamp,
			&i.Operation,
			&i.TargetPath,
			&i.Entries,
			&i.Status,
			&i.ErrorMsg,
			&i.Output,
			&i.ExecutedBy,
			&i.DurationMs,
			&i.Execstatus,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPendingTransactionsBySessionPQ = `-- name: GetPendingTransactionsBySessionPQ :many
SELECT id, session_id, timestamp, operation, target_path, entries, status, error_msg, output, executed_by, duration_ms, execstatus, created_at FROM pending_transactions_archive
WHERE session_id = $1
ORDER BY timestamp DESC
`

func (q *Queries) GetPendingTransactionsBySessionPQ(ctx context.Context, sessionID uuid.UUID) ([]PendingTransactionsArchive, error) {
	rows, err := q.db.Query(ctx, getPendingTransactionsBySessionPQ, sessionID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []PendingTransactionsArchive{}
	for rows.Next() {
		var i PendingTransactionsArchive
		if err := rows.Scan(
			&i.ID,
			&i.SessionID,
			&i.Timestamp,
			&i.Operation,
			&i.TargetPath,
			&i.Entries,
			&i.Status,
			&i.ErrorMsg,
			&i.Output,
			&i.ExecutedBy,
			&i.DurationMs,
			&i.Execstatus,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPendingTransactionsPQ = `-- name: GetPendingTransactionsPQ :many
SELECT id, session_id, timestamp, operation, target_path, entries, status, error_msg, output, executed_by, duration_ms, execstatus, created_at FROM pending_transactions_archive
WHERE session_id = $1 AND status = 'pending'
ORDER BY timestamp DESC
`

func (q *Queries) GetPendingTransactionsPQ(ctx context.Context, sessionID uuid.UUID) ([]PendingTransactionsArchive, error) {
	rows, err := q.db.Query(ctx, getPendingTransactionsPQ, sessionID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []PendingTransactionsArchive{}
	for rows.Next() {
		var i PendingTransactionsArchive
		if err := rows.Scan(
			&i.ID,
			&i.SessionID,
			&i.Timestamp,
			&i.Operation,
			&i.TargetPath,
			&i.Entries,
			&i.Status,
			&i.ErrorMsg,
			&i.Output,
			&i.ExecutedBy,
			&i.DurationMs,
			&i.Execstatus,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePendingTransactionStatusPQ = `-- name: UpdatePendingTransactionStatusPQ :one
UPDATE pending_transactions_archive
SET 
    status = $2,
    error_msg = $3,
    output = $4,
    duration_ms = $5,
    ExecStatus = $6
WHERE id = $1
RETURNING id, session_id, timestamp, operation, target_path, entries, status, error_msg, output, executed_by, duration_ms, execstatus, created_at
`

type UpdatePendingTransactionStatusPQParams struct {
	ID         uuid.UUID   `json:"id"`
	Status     string      `json:"status"`
	ErrorMsg   pgtype.Text `json:"error_msg"`
	Output     pgtype.Text `json:"output"`
	DurationMs pgtype.Int8 `json:"duration_ms"`
	Execstatus bool        `json:"execstatus"`
}

func (q *Queries) UpdatePendingTransactionStatusPQ(ctx context.Context, arg UpdatePendingTransactionStatusPQParams) (PendingTransactionsArchive, error) {
	row := q.db.QueryRow(ctx, updatePendingTransactionStatusPQ,
		arg.ID,
		arg.Status,
		arg.ErrorMsg,
		arg.Output,
		arg.DurationMs,
		arg.Execstatus,
	)
	var i PendingTransactionsArchive
	err := row.Scan(
		&i.ID,
		&i.SessionID,
		&i.Timestamp,
		&i.Operation,
		&i.TargetPath,
		&i.Entries,
		&i.Status,
		&i.ErrorMsg,
		&i.Output,
		&i.ExecutedBy,
		&i.DurationMs,
		&i.Execstatus,
		&i.CreatedAt,
	)
	return i, err
}
